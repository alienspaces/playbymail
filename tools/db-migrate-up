#!/bin/sh

# golang migrate
# https://github.com/golang-migrate/migrate/releases
migrate_tool_path=$(which migrate)
go_version=go$GO_VERSION
echo "=> (db-migrate-up) Migrate tool path ${migrate_tool_path}"
case "$migrate_tool_path" in
    *"$go_version"*) ;;
    *)
        echo "=> (db-migrate-up) Installing migrate"
        . ./tools/db-install-migrate || exit $?
        ;;
esac

# river migrate
# https://riverqueue.com/docs/migrations
river_migrate_tool_path=$(which river)
echo "=> (db-migrate-up) River migrate tool path ${river_migrate_tool_path}"
case "$river_migrate_tool_path" in
    *"$go_version"*) ;;
    *)
        echo "=> (db-migrate-up) Installing river migrate"
        . ./tools/db-install-river-migrate || exit $?
        ;;
esac

# Check if backend/db directory exists
migration_path=""
if [ -d "./backend/db" ]; then
    migration_path="./backend/db"
elif [ -d "./db" ]; then
    migration_path="./db"
else
    echo "=> (db-migrate-up) No db directory found (checked ./backend/db and ./db), skipping migrations"
    exit 0
fi

echo "=> (db-migrate-up) Migrate DATABASE: postgres://****:****@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME?sslmode=disable"
echo "=> (db-migrate-up) Migrate PATH    : $migration_path"

if [ -z "$DATABASE_URL" ]; then
    echo "=> (db-migrate-up) DATABASE_URL is not set, exiting"
    exit 1
fi

# backend migrations
migrate -verbose -path "$migration_path" -database "$DATABASE_URL" up || exit $?

echo "=> (db-migrate-up) Migrate up river queue"

# river migrations
# If the following fails, the incorrect version of river may be installed. When running
# locally, install the required version of river with ./tools/db-install-river-migrate
river migrate-up --database-url "$DATABASE_URL" up || exit $?
