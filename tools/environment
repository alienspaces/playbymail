#!/bin/sh

# Establish and validate minimum required environment for all processes
# USAGE: environment [optional path to .env]

verify_env() {
    # required for all environments
    env_vars="\
        APP_ENV \
        PORT \
        LOG_LEVEL \
        DATABASE_URL"
    
    missing=0
    for env_var_name in $env_vars; do
        eval env_var_value=\"\${$env_var_name}\"
        if [ -z "$env_var_value" ]; then
            echo "=> (env) Variable $env_var_name undefined"
            missing=1
            continue
        fi

        # masked
        if [ "${APP_SERVER_ENV_DEBUG_ENABLED}" = "true" ]; then
            case "$env_var_name" in
                *PASSWORD*|*KEY*|*SECRET*)
                    echo "=> (env) $env_var_name => ********"
                    ;;
                *)
                    echo "=> (env) $env_var_name => $env_var_value"
                    ;;
            esac
        fi
    done

    if [ "$missing" = "1" ]; then
        echo "=> (env) Variables missing, cannot continue"
        exit 1
    fi
}

# environment
dotfile_path="."
if [ -n "$1" ]; then
    dotfile_path="$1"
fi

if [ -f "$dotfile_path/.env.private" ]; then
    echo "=> (env) Appending private environment file"
    cat "$dotfile_path/.env.private" >> "$dotfile_path/.env"
fi

if [ -f "$dotfile_path/.env" ]; then
    echo "=> (env) Loading environment file"
    . "$dotfile_path/.env"
fi


# go present?
if ! command -v go >/dev/null 2>&1; then
    echo "=> (env) Go is not available, please install Go and try again"
    exit 1
fi

version=$(go version)
case "$version" in
    *"go${GO_VERSION}"*)
        echo "=> (env) Go version ${GO_VERSION} is correct"
        # correct version
        ;;
    *)
        echo "=> (env) Go version ${GO_VERSION} is required, please check your Go version and try again"
        exit 1
        ;;
esac

# verify environment
verify_env
